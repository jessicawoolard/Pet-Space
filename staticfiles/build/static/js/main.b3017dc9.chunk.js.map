{"version":3,"sources":["Components/UpdateForm.js","Container/App.js","serviceWorker.js","index.js"],"names":["UpdateForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","handleInput","bind","assertThisInitialized","handleSubmit","event","preventDefault","updateUser","first_name","last_name","phone_number","street_address","street_address_2","city","zip_code","setState","refs","form","reset","react_default","a","createElement","onSubmit","ref","type","onClick","value","Component","App","users","user","_this2","console","log","formData","FormData","append","fetch","concat","process","REACT_APP_API_HOST","method","body","then","response","json","updatedUsers","toConsumableArray","push","JSON","stringify","catch","error","_this3","status","Error","className","Components_UpdateForm","Boolean","window","location","hostname","match","ReactDOM","render","Container_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b3017dc9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\n\nclass UpdateForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: null\n        };\n        this.handleInput = this.handleInput.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(event){\n        event.preventDefault();\n        this.props.updateUser({\n            first_name: this.state.first_name,\n            last_name: this.state.last_name,\n            phone_number: this.state.phone_number,\n            street_address: this.state.street_address,\n            street_address_2: this.state.street_address_2,\n            city: this.state.city,\n            state: this.state.state,\n            zip_code: this.state.zip_code,\n        });\n        this.setState({data: ''});\n        this.refs.form.reset();\n\n    }\n      handleInput(event) {\n\n    }\n  render() {\n    return (\n        <div>\n        {/*<div>{users}</div>*/}\n\n        <form onSubmit={event => {event.preventDefault(); }} ref=\"form\">\n\n\n\n\n            <input type='button' onClick={this.handleSubmit} value='Update'/>\n        </form>\n        </div>\n    );\n  }\n}\n\nexport default UpdateForm;\n","import React, { Component } from 'react';\nimport './../App.css';\nimport UpdateForm from \"./../Components/UpdateForm\";\n\nclass App extends Component {\n  constructor(props) {\n      super(props);\n\n      this.state = {\n      users: [],\n      first_name: '',\n      last_name: '',\n      phone_number: '',\n      street_address: '',\n      street_address_2: '',\n      city: '',\n      state: '',\n      zip_code: '',\n    };\n\n    this.updateUser = this.updateUser.bind(this);\n  }\n\n  updateUser(user) {\n        console.log(user);\n        // let text = user.text;\n        let first_name = user.first_name;\n        let last_name = user.last_name;\n        let phone_number = user.phone_number;\n        let street_address = user.street_address;\n        let street_address_2 = user.street_address_2;\n        let city = user.city;\n        let state = user.state;\n        let zip_code = user.zip_code;\n\n        let formData = new FormData();\n        formData.append('first_name', first_name);\n        formData.append('last_name', last_name);\n        formData.append('phone_number', phone_number);\n        formData.append('street_address', street_address);\n        formData.append('street_address_2', street_address_2);\n        formData.append('city', city);\n        formData.append('state', state);\n        formData.append('zip_code', zip_code);\n\n        fetch(`${process.env.REACT_APP_API_HOST}/api/user/`, {\n            method: 'POST',\n            body: formData\n        }).then(response => response.json())\n            .then(json => {\n                let updatedUsers = [...this.state.users];\n                updatedUsers.push(json);\n                this.setState({users: updatedUsers});\n                console.log('Success', JSON.stringify(json))\n\n            })\n\n            .catch(error => console.log('Error', error))\n    }\n\n    componentDidMount() {\n        fetch(`${process.env.REACT_APP_API_HOST}/api/user/`, {\n            method: \"GET\"\n        }).then(response => {\n            if (response.status === 200) {\n                return response.json();\n            } else {\n                throw new Error('something went wrong');\n            }\n        })\n            .then(json => {\n                console.log('items', json);\n                this.setState({users: json})\n            })\n            .catch(error => console.log(error))\n    }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <UpdateForm updateUser={this.updateUser}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}