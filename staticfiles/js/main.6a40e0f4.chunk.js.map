{"version":3,"sources":["Components/UpdateForm.js","Components/CurrentProfile.js","Container/App.js","serviceWorker.js","index.js"],"names":["UpdateForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","first_name","last_name","phone_number","street_address","street_address2","city","zip_code","latitude","longitude","handleSubmit","bind","assertThisInitialized","handleChange","prevProps","updateUser","user","setState","event","preventDefault","onUpdate","defineProperty","target","name","value","react_default","a","createElement","onSubmit","ref","Card","Body","Title","Text","className","type","onChange","placeholder","autoCapitalize","street_address_2","htmlFor","id","Button","variant","size","Component","CurrentProfile","href","App","_this2","console","log","JSON","stringify","fetch","method","body","headers","Content-Type","Accept","then","response","json","catch","error","_this3","credentials","status","Error","Row","Col","sm","Components_CurrentProfile","Components_UpdateForm","Boolean","window","location","hostname","match","ReactDOM","render","Container_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a40e0f4.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport '../App.css';\nimport {Button} from 'react-bootstrap';\nimport {Card} from 'react-bootstrap';\n\nclass UpdateForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            first_name: '',\n            last_name: '',\n            phone_number: '',\n            street_address: '',\n            street_address2: '',\n            city: '',\n            state: '',\n            zip_code: '',\n            latitude: '',\n            longitude: ''\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.updateUser !== prevProps.updateUser) {\n            let user = this.props.updateUser;\n            this.setState({\n                first_name: user.first_name,\n                last_name: user.last_name,\n                phone_number: user.phone_number,\n                street_address: user.street_address,\n                street_address2: user.street_address2,\n                city: user.city,\n                state: user.state,\n                zip_code: user.zip_code,\n                latitude: user.latitude,\n                longitude: user.longitude\n            })\n        }\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        if (this.state.first_name) {\n            this.props.onUpdate(this.state);\n        }\n    }\n\n    handleChange(event) {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit} ref=\"form\">\n                <Card>\n\n                    <Card.Body>\n                        <Card.Title>Update</Card.Title>\n                        <Card.Text>\n                            <div className=\"update_input\"><input type=\"text\" name=\"first_name\"\n                                                                 onChange={this.handleChange}\n                                                                 value={this.state.first_name}\n                                                                 placeholder={'First name'} autoCapitalize/></div>\n                            <div className=\"update_input\"><input type=\"text\" onChange={this.handleChange} name=\"last_name\"\n                                       value={this.state.last_name}\n                                       placeholder={'Last name'} autoCapitalize/></div>\n                            <div className=\"update_input\"><input type=\"text\" onChange={this.handleChange}\n                                                                 name=\"phone_number\"\n                                                                 value={this.state.phone_number}\n                                                                 placeholder={'Phone number'}/></div>\n                            <div className=\"update_input\"><input type=\"text\" onChange={this.handleChange}\n                                                                 name=\"street_address\"\n                                                                 value={this.state.street_address}\n                                                                 placeholder={'Street address'} autoCapitalize/></div>\n                            <div className=\"update_input\"><input type=\"text\" onChange={this.handleChange} name=\"street_address_2\"\n                                       value={this.state.street_address_2} placeholder={'Street address cont'}\n                                       autoCapitalize/></div>\n                            <div className=\"update_input\"><input type=\"text\" onChange={this.handleChange} name=\"city\"\n                                                                 value={this.state.city}\n                                                                 placeholder={'City'} autoCapitalize/></div>\n\n                            <div className=\"update_input\"><label htmlFor=\"state_select\"> State</label>&nbsp;\n                                <select name=\"state\" id=\"state_select\" value={this.state.state}\n                                        onChange={this.handleChange}>\n                                    <option value=\"\"> Choose your state</option>\n                                    <option value=\"AL\">Alabama</option>\n                                    <option value=\"AK\">Alaska</option>\n                                    <option value=\"AZ\">Arizona</option>\n                                    <option value=\"AR\">Arkansas</option>\n                                    <option value=\"CA\">California</option>\n                                    <option value=\"CO\">Colorado</option>\n                                    <option value=\"CT\">Connecticut</option>\n                                    <option value=\"DE\">Delaware</option>\n                                    <option value=\"FL\">Florida</option>\n                                    <option value=\"GA\">Georgia</option>\n                                    <option value=\"HI\">Hawaii</option>\n                                    <option value=\"ID\">Idaho</option>\n                                    <option value=\"IL\">Illinois</option>\n                                    <option value=\"IN\">Indiana</option>\n                                    <option value=\"IA\">Iowa</option>\n                                    <option value=\"KS\">Kansas</option>\n                                    <option value=\"KY\">Kentucky</option>\n                                    <option value=\"LA\">Louisiana</option>\n                                    <option value=\"ME\">Maine</option>\n                                    <option value=\"MD\">Maryland</option>\n                                    <option value=\"MA\">Massachusetts</option>\n                                    <option value=\"MI\">Michigan</option>\n                                    <option value=\"MN\">Minnesota</option>\n                                    <option value=\"MS\">Mississippi</option>\n                                    <option value=\"MO\">Missouri</option>\n                                    <option value=\"MT\">Montana</option>\n                                    <option value=\"NE\">Nebraska</option>\n                                    <option value=\"NV\">Nevada</option>\n                                    <option value=\"NH\">New Hampshire</option>\n                                    <option value=\"NJ\">New Jersey</option>\n                                    <option value=\"NY\">New Mexico</option>\n                                    <option value=\"NY\">New York</option>\n                                    <option value=\"NC\">North Carolina</option>\n                                    <option value=\"ND\">North Dakota</option>\n                                    <option value=\"OH\">Ohio</option>\n                                    <option value=\"OK\">Oklahoma</option>\n                                    <option value=\"OR\">Oregon</option>\n                                    <option value=\"PA\">Pennsylvania</option>\n                                    <option value=\"RI\">Rhode Island</option>\n                                    <option value=\"SC\">South Carolina</option>\n                                    <option value=\"SD\">South Dakota</option>\n                                    <option value=\"TN\">Tennessee</option>\n                                    <option value=\"TX\">Texas</option>\n                                    <option value=\"UT\">Utah</option>\n                                    <option value=\"VT\">Vermont</option>\n                                    <option value=\"VA\">Virginia</option>\n                                    <option value=\"WA\">Washington</option>\n                                    <option value=\"WV\">West Virginia</option>\n                                    <option value=\"WI\">Wisconsin</option>\n                                    <option value=\"WY\">Wyoming</option>\n                                </select>\n                            </div>\n                            <div className=\"update_input\"><input type=\"text\" onChange={this.handleChange}\n                                                                 name=\"zip_code\"\n                                                                 value={this.state.zip_code}\n                                                                 placeholder={'Zip code'}/></div>\n                        </Card.Text>\n\n                        <Button variant=\"info\" type=\"submit\" size=\"sm\">Update</Button>\n                    </Card.Body>\n                </Card>\n            </form>\n        );\n    }\n}\n\nexport default UpdateForm;\n","import React, {Component} from 'react';\nimport '../App.css';\nimport {Button, Card} from 'react-bootstrap';\n\n\nclass CurrentProfile extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            first_name: '',\n            last_name: '',\n            phone_number: '',\n            street_address: '',\n            street_address2: '',\n            city: '',\n            state: '',\n            zip_code: ''\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.updateUser !== prevProps.updateUser) {\n            let user = this.props.updateUser;\n            this.setState({\n                first_name: user.first_name,\n                last_name: user.last_name,\n                phone_number: user.phone_number,\n                street_address: user.street_address,\n                street_address2: user.street_address2,\n                city: user.city,\n                state: user.state,\n                zip_code: user.zip_code\n            })\n        }\n    }\n\n    render() {\n\n        return (\n            <div className='current_profile'>\n            <Card>\n                <Card.Body>\n                    <Card.Title>Current Profile</Card.Title>\n                    <Card.Text>\n                        <table>\n                            <tbody>\n                            <tr>\n                                <td className='current_info'>{this.state.first_name}</td>\n                            </tr>\n                            <tr>\n                                <td className='current_info'>{this.state.last_name}</td>\n                            </tr>\n                            <tr>\n                                <td className='current_info'>{this.state.phone_number}</td>\n                            </tr>\n                            <tr>\n                                <td className='current_info'>{this.state.street_address}</td>\n                            </tr>\n                            <tr>\n                                <td className='current_info'>{this.state.street_address_2}</td>\n                            </tr>\n                            <tr>\n                                <td className='current_info'>{this.state.city}</td>\n                            </tr>\n                            <tr>\n                                <td className='current_info'>{this.state.state}</td>\n                            </tr>\n                            <tr>\n                                <td className='current_info'>{this.state.zip_code}</td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </Card.Text>\n                    <div>\n                    <a href=\"../../user_dashboard/\"> <Button variant=\"info\">Dashboard</Button> </a>\n                </div>\n\n                </Card.Body>\n\n            </Card>\n            </div>\n        );\n    }\n}\n\nexport default CurrentProfile;\n","import React, {Component} from 'react';\nimport './../App.css';\nimport UpdateForm from \"./../Components/UpdateForm\";\nimport CurrentProfile from \"../Components/CurrentProfile\";\n// import {Container} from 'react-bootstrap';\nimport {Row} from 'react-bootstrap';\nimport {Col} from 'react-bootstrap';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: null\n        };\n\n        this.updateUser = this.updateUser.bind(this);\n    }\n\n    updateUser(user) {\n        console.log(JSON.stringify(this.state.user));\n        fetch(`/api/update_profile/`, {\n            method: 'PUT',\n            body: JSON.stringify(user),\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n        }).then(response => response.json())\n            .then(json => {\n                // let updatedUser = json;\n                this.setState({user: json});\n                console.log('Success', json)\n\n            })\n\n            .catch(error => console.log('Error', error))\n    }\n\n    componentDidMount() {\n        fetch('/api/update_profile/', {\n            method: \"GET\",\n            credentials: 'include',\n        }).then(response => {\n            if (response.status === 200) {\n                return response.json();\n            } else {\n                throw new Error('something went wrong');\n            }\n        })\n            .then(json => {\n                // console.log('items', json);\n                this.setState({user: json})\n            })\n            .catch(error => console.log(error))\n    }\n\n    render() {\n        let user = this.state.user;\n        return (\n                <div className=\"App\">\n                    <div className=\"Container\">\n                    <Row className=\"col\">\n                        <Col sm={3}>\n                            <CurrentProfile updateUser={user}/>\n                        </Col>\n                        <Col sm={9}>\n                            <UpdateForm onUpdate={this.updateUser} updateUser={user}/>\n                        </Col>\n                    </Row>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}