{"version":3,"sources":["Components/UpdateForm.js","Components/CurrentProfile.js","Container/App.js","serviceWorker.js","index.js"],"names":["UpdateForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","first_name","last_name","phone_number","street_address","street_address2","city","zip_code","handleSubmit","bind","assertThisInitialized","handleChange","prevProps","updateUser","user","setState","event","preventDefault","onUpdate","defineProperty","target","name","value","react_default","a","createElement","onSubmit","ref","type","onChange","placeholder","street_address_2","Component","CurrentProfile","data","App","_this2","console","log","JSON","stringify","fetch","method","body","headers","Content-Type","Accept","then","response","json","catch","error","_this3","credentials","status","Error","className","Components_UpdateForm","Components_CurrentProfile","href","Boolean","window","location","hostname","match","ReactDOM","render","Container_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb133971.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport '../App.css';\n\nclass UpdateForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            first_name: '',\n            last_name: '',\n            phone_number: '',\n            street_address: '',\n            street_address2: '',\n            city: '',\n            state: '',\n            zip_code: ''\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    componentDidUpdate(prevProps){\n        if(this.props.updateUser !== prevProps.updateUser){\n            let user = this.props.updateUser;\n            this.setState({first_name: user.first_name, last_name: user.last_name, phone_number: user.phone_number, street_address: user.street_address, street_address2: user.street_address2, city: user.city, state: user.state, zip_code: user.zip_code })\n        }\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        if(this.state.first_name) {\n            this.props.onUpdate(this.state);\n        }\n    }\n\n    handleChange(event) {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit} ref=\"form\" >\n                <div><input type=\"text\" name=\"first_name\" onChange={this.handleChange} value={this.state.first_name} placeholder={'First name'}/></div>\n                <div><input type=\"text\" onChange={this.handleChange} name=\"last_name\" value={this.state.last_name} placeholder={'Last name'}/></div>\n                <div><input type=\"text\" onChange={this.handleChange} name=\"phone_number\" value={this.state.phone_number} placeholder={'Phone number'}/></div>\n                <div><input type=\"text\" onChange={this.handleChange} name=\"street_address\" value={this.state.street_address} placeholder={'Street address'}/></div>\n                <div><input type=\"text\" onChange={this.handleChange} name=\"street_address_2\" value={this.state.street_address_2} placeholder={'Street address cont'}/></div>\n                <div><input type=\"text\" onChange={this.handleChange} name=\"city\" value={this.state.city} placeholder={'City'}/></div>\n                <div><input type=\"text\" onChange={this.handleChange} name=\"state\" value={this.state.state} placeholder={'State'}/></div>\n                <div><input type=\"text\" onChange={this.handleChange} name=\"zip_code\" value={this.state.zip_code} placeholder={'Zip code'}/></div>\n                <input type=\"submit\" value=\"Update\"/>\n            </form>\n        );\n    }\n}\n\nexport default UpdateForm;\n","import React, {Component} from 'react';\nimport '../App.css';\n\nclass CurrentProfile extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n  data: props.data\n};\n    }\n\n    render() {\n\n        let first_name = this.props.updateUser != null ? this.props.updateUser.first_name : \"\";\n        let last_name = this.props.updateUser != null ? this.props.updateUser.last_name : \"\";\n        let phone_number = this.props.updateUser != null ? this.props.updateUser.phone_number : \"\";\n        let street_address = this.props.updateUser != null ? this.props.updateUser.street_address : \"\";\n        let street_address_2 = this.props.updateUser != null ? this.props.updateUser.street_address_2 : \"\";\n        let city = this.props.updateUser != null ? this.props.updateUser.city : \"\";\n        let state = this.props.updateUser != null ? this.props.updateUser.state : \"\";\n        let zip_code = this.props.updateUser != null ? this.props.updateUser.zip_code : \"\";\n\n        return (\n            <table>\n                <tbody>\n                    <tr>\n                        <td>First Name</td>\n                        <td>{first_name}</td>\n                    </tr>\n                                        <tr>\n                        <td>Last Name</td>\n                        <td>{last_name}</td>\n                    </tr>\n                                        <tr>\n                        <td>Phone Number</td>\n                        <td>{phone_number}</td>\n                    </tr>\n                                        <tr>\n                        <td>Street Address</td>\n                        <td>{street_address}</td>\n                    </tr>\n                                        <tr>\n                        <td>Street Address 2</td>\n                        <td>{street_address_2}</td>\n                    </tr>\n                                        <tr>\n                        <td>City</td>\n                        <td>{city}</td>\n                    </tr>\n                                        <tr>\n                        <td>State</td>\n                        <td>{state}</td>\n                    </tr>\n                                        <tr>\n                        <td>Zip Code</td>\n                        <td>{zip_code}</td>\n                    </tr>\n                </tbody>\n            </table>\n\n        );\n    }\n}\n\nexport default CurrentProfile;\n","import React, {Component} from 'react';\nimport './../App.css';\nimport UpdateForm from \"./../Components/UpdateForm\";\nimport CurrentProfile from \"../Components/CurrentProfile\";\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: null\n        };\n\n        this.updateUser = this.updateUser.bind(this);\n    }\n\n    updateUser(user) {\n        console.log(JSON.stringify(this.state.user));\n        fetch(`/api/update_profile/`, {\n            method: 'PUT',\n            body: JSON.stringify(user),\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n        }).then(response => response.json())\n            .then(json => {\n                // let updatedUser = json;\n                this.setState({user: json});\n                console.log('Success', json)\n\n            })\n\n            .catch(error => console.log('Error', error))\n    }\n\n    componentDidMount() {\n        fetch('/api/update_profile/', {\n            method: \"GET\",\n            credentials: 'include',\n        }).then(response => {\n            if (response.status === 200) {\n                return response.json();\n            } else {\n                throw new Error('something went wrong');\n            }\n        })\n            .then(json => {\n                // console.log('items', json);\n                this.setState({user: json})\n            })\n            .catch(error => console.log(error))\n    }\n\n    render() {\n        let user = this.state.user;\n        return (\n            <div className=\"App\">\n                <UpdateForm onUpdate={this.updateUser} updateUser={user}/>\n                <CurrentProfile updateUser={user}/>\n                <button>\n                    <a href=\"../user_dashboard/\"> Go back to dashboard </a>\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}