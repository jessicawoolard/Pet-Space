{"version":3,"sources":["Components/UpdateForm.js","Components/CurrentProfile.js","Container/App.js","serviceWorker.js","index.js"],"names":["UpdateForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","first_name","last_name","phone_number","street_address","street_address2","city","zip_code","latitude","longitude","handleSubmit","bind","assertThisInitialized","handleChange","prevProps","updateUser","user","setState","event","preventDefault","onUpdate","defineProperty","target","name","value","react_default","a","createElement","onSubmit","ref","type","onChange","placeholder","autoCapitalize","street_address_2","htmlFor","id","Component","CurrentProfile","App","_this2","console","log","JSON","stringify","fetch","method","body","headers","Content-Type","Accept","then","response","json","catch","error","_this3","credentials","status","Error","className","Components_UpdateForm","Components_CurrentProfile","href","Boolean","window","location","hostname","match","ReactDOM","render","Container_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dae6cf08.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport '../App.css';\n\nclass UpdateForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            first_name: '',\n            last_name: '',\n            phone_number: '',\n            street_address: '',\n            street_address2: '',\n            city: '',\n            state: '',\n            zip_code: '',\n            latitude: '',\n            longitude: ''\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.updateUser !== prevProps.updateUser) {\n            let user = this.props.updateUser;\n            this.setState({\n                first_name: user.first_name,\n                last_name: user.last_name,\n                phone_number: user.phone_number,\n                street_address: user.street_address,\n                street_address2: user.street_address2,\n                city: user.city,\n                state: user.state,\n                zip_code: user.zip_code,\n                latitude: user.latitude,\n                longitude: user.longitude\n            })\n        }\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        if (this.state.first_name) {\n            this.props.onUpdate(this.state);\n        }\n    }\n\n    handleChange(event) {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit} ref=\"form\" >\n                <div><input type=\"text\" name=\"first_name\"  onChange={this.handleChange} value={this.state.first_name}\n                            placeholder={'First name'} autoCapitalize/></div>\n                <div><input type=\"text\" onChange={this.handleChange} name=\"last_name\" value={this.state.last_name}\n                            placeholder={'Last name'} autoCapitalize/></div>\n                <div><input type=\"text\" onChange={this.handleChange} name=\"phone_number\" value={this.state.phone_number}\n                            placeholder={'Phone number'}/></div>\n                <div><input type=\"text\" onChange={this.handleChange} name=\"street_address\"\n                            value={this.state.street_address} placeholder={'Street address'} autoCapitalize/></div>\n                <div><input type=\"text\" onChange={this.handleChange} name=\"street_address_2\"\n                            value={this.state.street_address_2} placeholder={'Street address cont'} autoCapitalize/></div>\n                <div><input type=\"text\" onChange={this.handleChange} name=\"city\" value={this.state.city}\n                            placeholder={'City'} autoCapitalize/></div>\n                <div>\n                    <label htmlFor=\"state_select\"> State</label>\n                    <select name=\"state\" id=\"state_select\" value={this.state.state} onChange={this.handleChange}>\n                        <option value=\"\"> Choose your state</option>\n                        <option value=\"AL\">Alabama</option>\n                        <option value=\"AK\">Alaska</option>\n                        <option value=\"AZ\">Arizona</option>\n                        <option value=\"AR\">Arkansas</option>\n                        <option value=\"CA\">California</option>\n                        <option value=\"CO\">Colorado</option>\n                        <option value=\"CT\">Connecticut</option>\n                        <option value=\"DE\">Delaware</option>\n                        <option value=\"FL\">Florida</option>\n                        <option value=\"GA\">Georgia</option>\n                        <option value=\"HI\">Hawaii</option>\n                        <option value=\"ID\">Idaho</option>\n                        <option value=\"IL\">Illinois</option>\n                        <option value=\"IN\">Indiana</option>\n                        <option value=\"IA\">Iowa</option>\n                        <option value=\"KS\">Kansas</option>\n                        <option value=\"KY\">Kentucky</option>\n                        <option value=\"LA\">Louisiana</option>\n                        <option value=\"ME\">Maine</option>\n                        <option value=\"MD\">Maryland</option>\n                        <option value=\"MA\">Massachusetts</option>\n                        <option value=\"MI\">Michigan</option>\n                        <option value=\"MN\">Minnesota</option>\n                        <option value=\"MS\">Mississippi</option>\n                        <option value=\"MO\">Missouri</option>\n                        <option value=\"MT\">Montana</option>\n                        <option value=\"NE\">Nebraska</option>\n                        <option value=\"NV\">Nevada</option>\n                        <option value=\"NH\">New Hampshire</option>\n                        <option value=\"NJ\">New Jersey</option>\n                        <option value=\"NY\">New Mexico</option>\n                        <option value=\"NY\">New York</option>\n                        <option value=\"NC\">North Carolina</option>\n                        <option value=\"ND\">North Dakota</option>\n                        <option value=\"OH\">Ohio</option>\n                        <option value=\"OK\">Oklahoma</option>\n                        <option value=\"OR\">Oregon</option>\n                        <option value=\"PA\">Pennsylvania</option>\n                        <option value=\"RI\">Rhode Island</option>\n                        <option value=\"SC\">South Carolina</option>\n                        <option value=\"SD\">South Dakota</option>\n                        <option value=\"TN\">Tennessee</option>\n                        <option value=\"TX\">Texas</option>\n                        <option value=\"UT\">Utah</option>\n                        <option value=\"VT\">Vermont</option>\n                        <option value=\"VA\">Virginia</option>\n                        <option value=\"WA\">Washington</option>\n                        <option value=\"WV\">West Virginia</option>\n                        <option value=\"WI\">Wisconsin</option>\n                        <option value=\"WY\">Wyoming</option>\n                    </select>\n                </div>\n                <div><input type=\"text\" onChange={this.handleChange} name=\"zip_code\" value={this.state.zip_code} placeholder={'Zip code'}/></div>\n                <div><input type=\"hidden\" onChange={this.handleChange} name=\"latitude\" value={this.state.latitude} /></div>\n                <input type=\"submit\" value=\"Update\"/>\n            </form>\n        );\n    }\n}\n\nexport default UpdateForm;\n","import React, {Component} from 'react';\nimport '../App.css';\n\nclass CurrentProfile extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            first_name: '',\n            last_name: '',\n            phone_number: '',\n            street_address: '',\n            street_address2: '',\n            city: '',\n            state: '',\n            zip_code: ''\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.updateUser !== prevProps.updateUser) {\n            let user = this.props.updateUser;\n            this.setState({\n                first_name: user.first_name,\n                last_name: user.last_name,\n                phone_number: user.phone_number,\n                street_address: user.street_address,\n                street_address2: user.street_address2,\n                city: user.city,\n                state: user.state,\n                zip_code: user.zip_code\n            })\n        }\n    }\n\n    render() {\n\n        // if (this.props.updateUser) {\n        //     first_name = this.props.updateUser.first_name;\n        // } else {\n        //     first_name = \"\";\n        // }\n        // let first_name = this.props.updateUser != null ? this.props.updateUser.first_name : \"\";\n        // let last_name = this.props.updateUser != null ? this.props.updateUser.last_name : \"\";\n        // let phone_number = this.props.updateUser != null ? this.props.updateUser.phone_number : \"\";\n        // let street_address = this.props.updateUser != null ? this.props.updateUser.street_address : \"\";\n        // let street_address_2 = this.props.updateUser != null ? this.props.updateUser.street_address_2 : \"\";\n        // let city = this.props.updateUser != null ? this.props.updateUser.city : \"\";\n        // let state = this.props.updateUser != null ? this.props.updateUser.state : \"\";\n        // let zip_code = this.props.updateUser != null ? this.props.updateUser.zip_code : \"\";\n\n        return (\n            <table>\n                <tbody>\n                <tr>\n                    <td>First Name</td>\n                    <td>{this.state.first_name}</td>\n                </tr>\n                <tr>\n                    <td>Last Name</td>\n                    <td>{this.state.last_name}</td>\n                </tr>\n                <tr>\n                    <td>Phone Number</td>\n                    <td>{this.state.phone_number}</td>\n                </tr>\n                <tr>\n                    <td>Street Address</td>\n                    <td>{this.state.street_address}</td>\n                </tr>\n                <tr>\n                    <td>Street Address 2</td>\n                    <td>{this.state.street_address_2}</td>\n                </tr>\n                <tr>\n                    <td>City</td>\n                    <td>{this.state.city}</td>\n                </tr>\n                <tr>\n                    <td>State</td>\n                    <td>{this.state.state}</td>\n                </tr>\n                <tr>\n                    <td>Zip Code</td>\n                    <td>{this.state.zip_code}</td>\n                </tr>\n                </tbody>\n            </table>\n\n        );\n    }\n}\n\nexport default CurrentProfile;\n","import React, {Component} from 'react';\nimport './../App.css';\nimport UpdateForm from \"./../Components/UpdateForm\";\nimport CurrentProfile from \"../Components/CurrentProfile\";\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: null\n        };\n\n        this.updateUser = this.updateUser.bind(this);\n    }\n\n    updateUser(user) {\n        console.log(JSON.stringify(this.state.user));\n        fetch(`/api/update_profile/`, {\n            method: 'PUT',\n            body: JSON.stringify(user),\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n        }).then(response => response.json())\n            .then(json => {\n                // let updatedUser = json;\n                this.setState({user: json});\n                console.log('Success', json)\n\n            })\n\n            .catch(error => console.log('Error', error))\n    }\n\n    componentDidMount() {\n        fetch('/api/update_profile/', {\n            method: \"GET\",\n            credentials: 'include',\n        }).then(response => {\n            if (response.status === 200) {\n                return response.json();\n            } else {\n                throw new Error('something went wrong');\n            }\n        })\n            .then(json => {\n                // console.log('items', json);\n                this.setState({user: json})\n            })\n            .catch(error => console.log(error))\n    }\n\n    render() {\n        let user = this.state.user;\n        return (\n            <div className=\"App\">\n                <UpdateForm onUpdate={this.updateUser} updateUser={user}/>\n                <CurrentProfile updateUser={user}/>\n                <button>\n                    <a href=\"../../user_dashboard/\"> Go back to dashboard </a>\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}